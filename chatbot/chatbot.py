import streamlit as st
from openai import OpenAI
import pandas as pd
from langchain.vectorstores import Chroma
from langchain.embeddings import OpenAIEmbeddings
import os

# –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML –∏ CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
st.markdown("""
    <style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    span[style*="color: pink"] {
        color: pink !important;
        font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)

class MovieChatbot:
    @staticmethod
    def initialize_session_state():
        if "messages" not in st.session_state:
            st.session_state.messages = [
                {
                    "role": "system",
                    "content": """Tu es CineBot, un assistant cin√©ma passionn√© üé¨. 
                    IMPORTANT: Tu DOIS formatter chaque titre de film en utilisant cette syntaxe Markdown: 
                    **<span style='color: pink'>TITRE DU FILM</span>**
                    
                    Tu donnes des r√©ponses d√©taill√©es sur les films jusqu'√† l'ann√©e 2000, acteurs et r√©alisateurs.
                    Tu as acc√®s √† une base de donn√©es de films, d'acteurs et de r√©alisateurs.
                    
                    Tu peux fournir des informations sur:
                    - Les films (titre, ann√©e, genre, note, synopsis)
                    - Les acteurs et r√©alisateurs (nom, films dans lesquels ils ont jou√©/qu'ils ont r√©alis√©s)
                    - Les recommandations de films similaires
                    
                    Pour chaque film mentionn√©, tu DOIS inclure:
                    ‚≠ê Note (si disponible)
                    üìÖ Ann√©e
                    üé≠ Genre
                    üìù Synopsis
                    üé¨ Acteurs principaux
                    üé• Lien vers la bande-annonce (si disponible)
                    
                    Tu parles uniquement en fran√ßais et utilises beaucoup des √©mojis appropri√©s."""
                },
                {
                    "role": "assistant",
                    "content": "Bonjour! üé¨ Je suis CineBot, votre assistant cin√©ma passionn√©! Comment puis-je vous aider aujourd'hui? üçø"
                }
            ]

    def __init__(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–≤—ã–º
            self.initialize_session_state()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∏ embeddings
            self.client = OpenAI(api_key=st.secrets["OpenAI_key"])
            self.embeddings = OpenAIEmbeddings(openai_api_key=st.secrets["OpenAI_key"])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.films = pd.read_csv("csv/films_def.csv")
            self.intervenants = pd.read_csv("csv/intervenants_def.csv")
            self.lien = pd.read_csv("csv/lien_def.csv")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ vectorstore
            self.vectorstore = self._create_or_load_vectorstore()
                
        except Exception as e:
            st.error(f"Erreur d'initialisation du chatbot: {str(e)}")
            st.error(f"Type d'erreur: {type(e).__name__}")
            if hasattr(e, 'args'):
                st.error(f"Arguments de l'erreur: {e.args}")

    def _create_or_load_vectorstore(self):
        persist_directory = "./new_chroma_db"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(persist_directory):
            os.makedirs(persist_directory)
            
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É
            vectorstore = Chroma(
                persist_directory=persist_directory,
                embedding_function=self.embeddings
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            vectorstore.similarity_search("test", k=1)
            return vectorstore
            
        except Exception as e:
            st.warning(f"La base existante n'a pas pu √™tre charg√©e, cr√©ation d'une nouvelle base. Erreur: {str(e)}")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            documents = self._prepare_movie_documents()
            vectorstore = Chroma.from_texts(
                texts=[doc["content"] for doc in documents],
                metadatas=[doc["metadata"] for doc in documents],
                embedding=self.embeddings,
                persist_directory=persist_directory
            )
            vectorstore.persist()
            return vectorstore
    
    def _prepare_movie_documents(self):
        documents = []
        for _, movie in self.films.iterrows():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥ —Ñ–∏–ª—å–º–∞
                year = int(movie['release_date'][:4]) if pd.notna(movie['release_date']) else 0
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ—Å–ª–µ 2000 –≥–æ–¥–∞
                if year > 2000:
                    continue
                    
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
                title = f"**<span style='color: pink'>{movie['title']}</span>**"
                
                content = f"Titre: {title}\n"
                content += f"üìÖ Ann√©e: {year if year != 0 else 'Non disponible'}\n"
                content += f"üé≠ Genre: {movie['genres'] if pd.notna(movie['genres']) else 'Non sp√©cifi√©'}\n"
                content += f"‚≠ê Note: {movie['averageRating'] if pd.notna(movie['averageRating']) else 'Non disponible'}/10\n"
                content += f"üìù Synopsis: {movie['overview'] if pd.notna(movie['overview']) else 'Non disponible'}\n"
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–µ—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞
                movie_actors = self.lien[
                    (self.lien['tconst'] == movie['tconst']) & 
                    (self.lien['category'] == 'actor')
                ]
                actors = self.intervenants[
                    self.intervenants['nconst'].isin(movie_actors['nconst'])
                ]
                content += f"üé¨ Acteurs: {', '.join(actors['primaryName'])}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–π–ª–µ—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if pd.notna(movie['trailer_link']):
                    content += f"üé• Bande-annonce: [Regarder le trailer]({movie['trailer_link']})\n"
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ —Ç—Ä–µ–π–ª–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if pd.notna(movie['langue_trailer']):
                        content += f"üåç Langue du trailer: {movie['langue_trailer']}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—ç–≥–ª–∞–π–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if pd.notna(movie['tagline']) and movie['tagline'] != '':
                    content += f"üí´ Tagline: {movie['tagline']}\n"
                
                documents.append({
                    "content": content,
                    "metadata": {
                        "tconst": movie['tconst'],
                        "year": year,
                        "title": movie['title'],
                        "genres": movie['genres'] if pd.notna(movie['genres']) else '',
                        "rating": float(movie['averageRating']) if pd.notna(movie['averageRating']) else 0.0,
                        "trailer_link": movie['trailer_link'] if pd.notna(movie['trailer_link']) else '',
                        "langue_trailer": movie['langue_trailer'] if pd.notna(movie['langue_trailer']) else ''
                    }
                })
            except Exception as e:
                st.warning(f"Erreur lors de la pr√©paration du document pour {movie['title']}: {str(e)}")
                continue
                
        return documents

    def get_response(self, user_input: str) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º embedding –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            embedding_response = self.embeddings.embed_documents([user_input])[0]
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            similar_movies = self.vectorstore.similarity_search_by_vector(
                embedding_response, 
                k=10,
                filter={"year": {"$lte": 2000}}  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã –¥–æ 2000 –≥–æ–¥–∞
            )
            
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = "Information sur les films disponibles:\n"
            for movie in similar_movies:
                context += f"\n---\n{movie.page_content}\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = """Tu es CineBot, un assistant cin√©ma passionn√© üé¨. 
            
            R√àGLES IMPORTANTES:
            1. Tu ne dois parler QUE des films d'avant 2000!
            2. Chaque titre de film DOIT √™tre format√© ainsi: **<span style='color: pink'>TITRE DU FILM</span>**
            3. Pour CHAQUE film mentionn√©, tu DOIS inclure:
               - üìÖ Ann√©e
               - üé≠ Genre
               - ‚≠ê Note /10
               - üìù Synopsis
               - üé¨ Acteurs
               - üé• Lien de la bande-annonce (si disponible)
            4. Utilise TOUJOURS des √©mojis appropri√©s
            5. Si le film a un lien vers la bande-annonce, ajoute "üé• Cliquez ici pour voir la bande-annonce!"
            6. Sois enthousiaste et passionn√©!
            
            Contexte des films disponibles:
            {context}
            """
            
            messages = [
                {"role": "system", "content": system_prompt.format(context=context)},
                {"role": "user", "content": user_input}
            ]
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                temperature=0.7,
                max_tokens=800
            )
            
            return response.choices[0].message.content

        except Exception as e:
            error_message = f"D√©sol√©, une erreur s'est produite: {str(e)}"
            st.error(error_message)
            return "Je suis d√©sol√©, je ne peux pas r√©pondre pour le moment. üòî"

    def display(self):
        try:
            with st.container():
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                for message in st.session_state.messages:
                    if message["role"] != "system":
                        with st.chat_message(message["role"]):
                            st.markdown(message["content"], unsafe_allow_html=True)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if prompt := st.chat_input("Posez votre question sur les films..."):
                    st.session_state.messages.append({"role": "user", "content": prompt})
                    with st.chat_message("user"):
                        st.markdown(prompt)

                    with st.chat_message("assistant"):
                        response = self.get_response(prompt)
                        st.markdown(response, unsafe_allow_html=True)
                        st.session_state.messages.append({"role": "assistant", "content": response})
                        
        except Exception as e:
            st.error(f"Erreur d'affichage du chat: {str(e)}")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —á–∞—Ç–±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    st.title("üé¨ CineBot - Votre Assistant Cin√©ma")
    bot = MovieChatbot()
    bot.display()